using System;
using System.Collections.Generic;

using Grasshopper.Kernel;
using Rhino.Geometry;

namespace Cells.src.Voxels
{
    public class DeconstructVoxelMain : GH_Component
    {
        public DeconstructVoxelMain()
          : base("DeconstructVoxel", "Deconstruct Voxel",
              "Deconstructs the voxels into center points, breps, base-plane curve, and indices",
              "Cells", "Voxels")
        {
        }

        protected override void RegisterInputParams(GH_Component.GH_InputParamManager pManager)
        {
            // 0.
            pManager.AddGenericParameter("Voxels", "voxels", "Input of voxels generated by Dots", GH_ParamAccess.list);
        }

        protected override void RegisterOutputParams(GH_Component.GH_OutputParamManager pManager)
        {
            // 0. center point
            pManager.AddPointParameter("Center points of voxels", "center", "Array of Center Points of the voxels", GH_ParamAccess.list);
            // 1. brep
            pManager.AddBrepParameter("Brep of voxels", "brep", "Array of Breps of the voxels", GH_ParamAccess.list);
            // 2. Plane - polyline
            pManager.AddCurveParameter("voxel curve at base plane", "plane-crv", "Array of Base plane curve of the voxels", GH_ParamAccess.list);
            // 3. [x,y,z] indices
            pManager.AddVectorParameter("Array of indices given by vector3d (x,y,z)", "indices as vectors(x,y,z)", "Array of indices represented as vectors to identify voxels", GH_ParamAccess.list);
            // 4. debug
            pManager.AddTextParameter("debug", "debug", "debug", GH_ParamAccess.list);
        }

        protected override void SolveInstance(IGH_DataAccess DA)
        {
            List<string> debugLi = new List<string>();

            List<Voxel> voxelLi = new List<Voxel>();
            if (!DA.GetDataList(0, voxelLi)) return;

            List<Point3d> ptLi = new List<Point3d>();
            List<Brep> brepLi = new List<Brep>();
            List<Curve> polyLi = new List<Curve>();
            List<Vector3d> indexLi = new List<Vector3d>();

            for(int i=0; i<voxelLi.Count; i++)
            {
                Voxel v = voxelLi[i];
                Point3d p = v.CenterPoint;
                ptLi.Add(p);
                Brep b = v.Mass;
                brepLi.Add(b);
                PolylineCurve poly = v.Poly;
                polyLi.Add(poly);
                Vector3d vec = new Vector3d(v.x, v.y, v.z);
                indexLi.Add(vec);
            }

            DA.SetDataList(0, ptLi);
            DA.SetDataList(1, brepLi);
            DA.SetDataList(2, polyLi);
            DA.SetDataList(3, indexLi);

            string s = voxelLi.Count+"";
            debugLi.Add(s);
            DA.SetDataList(4, debugLi);
        }

        protected override System.Drawing.Bitmap Icon
        {
            get
            {
                return null;
            }
        }
        public override Guid ComponentGuid
        {
            get { return new Guid("03bc8703-8ebe-4065-8874-308262d3afb7"); } // updated
        }
    }
}